[project]
name = "aioinject"
version = "0.11.2"
description = "Async dependency injection library"
requires-python = ">=3.10"
authors = [
    {name = "Doctor", email = "thirvondukr@gmail.com"},
]
dependencies = [
    "typing-extensions>=4.0.0",
]
readme = "readme.md"
license = {text = "MIT"}
classifiers = [
    "License :: OSI Approved :: MIT License",
]

[project.urls]
"Repository" = "https://gitlab.com/ThirVondukr/aioinject"

[build-system]
requires = ["pdm-pep517>=1.0"]
build-backend = "pdm.pep517.api"


[tool.commitizen]
name = "cz_conventional_commits"
version = "0.11.2"
version_files = [
    "aioinject/__init__.py",
    "pyproject.toml:version"
]

[tool.coverage.run]
source = ["aioinject"]
command_line = "-m pytest"

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
]
show_missing = true
skip_covered = true
skip_empty = true
precision = 2

[tool.black]
line_length = 79

[tool.isort]
profile = "black"
line_length = 79


[tool.ruff]
target-version = "py310"
src = ["aioinject", "tests"]
select = ["ALL"]
fixable = ["F", "UP", "COM"]
ignore = [
    "D",
    "PD",  # pandas-vet
    "I",  # Isort
    "E501",
    "ANN101",
    "ANN102",
    "ANN401",
    "TCH001",
    "TCH002",
    "TCH003",
    "EXE",
]

[tool.ruff.per-file-ignores]
"tests/*" = ["S101"]

[tool.ruff.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false

[tool.ruff.mccabe]
max-complexity = 6

[tool.ruff.flake8-bugbear]
extend-immutable-calls = []

[tool.ruff.pep8-naming]
classmethod-decorators = ["classmethod"]
staticmethod-decorators = ["staticmethod"]



[tool.pdm]
[tool.pdm.dev-dependencies]
dev = [
    "black>=23.1.0",
    "isort>=5.12.0",
    "mypy>=1.0.1",
    "anyio>=3.6.2",
    "trio>=0.22.0",
    "pytest>=7.2.1",
    "coverage[toml]>=7.1.0",
    "strawberry-graphql>=0.156.4",
    "fastapi>=0.92.0",
    "ruff>=0.0.247",
    "commitizen>=2.42.1",
    "litestar>=2.0.0rc1",
    "uvicorn>=0.23.2",
    "asgi-lifespan>=2.1.0",
]

[tool.pdm.scripts]
lint = {composite = [
    "black .",
    "isort .",
    "ruff . --fix",
    "mypy .",
]}
test = {composite = [
    "coverage run",
    "coverage report",
]}
